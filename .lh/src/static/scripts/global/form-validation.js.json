{
    "sourceFile": "src/static/scripts/global/form-validation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1624010200411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1624364562805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,9 +268,11 @@\n     });\n     this.inside.submit.elems.forEach(_elem => {\n       $(_elem).click(_evt => {\n         _evt.preventDefault();\n-        this.check();\n+        // if ($(_elem).attr('disabled') === false) {\n+          this.check();\n+        // }\n       })\n     })\n     this._elemStatus = [];\n     this.testMode = false;\n@@ -401,16 +403,14 @@\n       inputText: {\n         valueLength: 254\n       },\n       inputTel: {\n-        valueCheckAlgorithm: /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/,\n         valueLength: 50\n       },\n       inputEmail: {\n         valueCheckAlgorithm: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n         valueLength: 254\n-      },\n-      // acceptance: $('.header-callback .header-callback-form-policy__input')[0]\n+      }\n     })\n   }\n   \n   if ($('.header-callback-vacancy .header-callback-form').length > 0) {\n@@ -418,16 +418,14 @@\n       inputText: {\n         valueLength: 254\n       },\n       inputTel: {\n-        valueCheckAlgorithm: /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/,\n         valueLength: 50\n       },\n       inputEmail: {\n         valueCheckAlgorithm: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n         valueLength: 254\n       },\n-      // acceptance: $('.header-callback-vacancy .header-callback-form-policy__input')[0],\n       ignor: $('.header-callback__vacancy')[0]\n     })\n   }\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1624364929467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,11 +268,9 @@\n     });\n     this.inside.submit.elems.forEach(_elem => {\n       $(_elem).click(_evt => {\n         _evt.preventDefault();\n-        // if ($(_elem).attr('disabled') === false) {\n           this.check();\n-        // }\n       })\n     })\n     this._elemStatus = [];\n     this.testMode = false;\n"
                },
                {
                    "date": 1624364940005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,429 @@\n+const FormValidation = function (_selectorForm, _options) {\n+  //  _selectorForm | DOM element | The form.\n+  //  _options | Object | Options of the form validation.\n+  //  - EXAMPLE start -\n+  //  var _form = new FormValidation({{{ 1 }}}, {\n+  //    {{{ 2 }}}: {\n+  //      valueCheckAlgorithm: {{{ 3 }}},\n+  //      valueLength: {{{ 4 }}}\n+  //    },\n+  //    acceptance: [\n+  //      {{{ 5 }}},\n+  //      {{{ 5 }}}\n+  //    ]\n+  //    - OR -\n+  //    acceptance: {{{ 5 }}}\n+  //  });\n+  //  - EXAMPLE end -  \n+  //  {{{ 1 }}} | DOM element | The form's DOM element.\n+  //  {{{ 2 }}} | Object property | The type of input. Abled values: \"inputText\", \"inputTel\", \"inputEmail\", \"textarea\", \"acceptance\", \"ignor\".\n+  //  {{{ 3 }}} | RegExp | Regular expression, you want to check with.\n+  //  {{{ 4 }}} | Number | Maximum size of input value. It creates \"maxlength\" attribute of \"input\" in DOM.\n+  //  {{{ 5 }}} | DOM element, checkbox | The acceptance's input-checkbox.\n+  //\n+  //  Use property \"testMode\" in created objects or in constructor to test your validation in front-end and not submit the form.\n+  //  You can see \"test_STATUS-CORRECT\" or \"test_STATUS-INCORRECT\" in form class attribute.\n+\n+  try {\n+    if (typeof _selectorForm !== 'object' && !_selectorForm.nodeName) {\n+      throw new TypeError('Argument is not a DOM element. Expected: DOM element.');\n+    }\n+    let _formCorrect = new Event('form-status-correct');\n+    let _formIncorrect = new Event('form-status-incorrect');\n+    this.inside = {};\n+    this.inside.form = _selectorForm;\n+    this.inside.ignor = [];\n+    this.inside.inputText = {};\n+    this.inside.inputText.elems = [];\n+    this.inside.inputText.valueCheckAlgorithm = undefined;\n+    this.inside.inputText.valueLength = undefined;\n+    this.inside.inputTel = {};\n+    this.inside.inputTel.elems = [];\n+    this.inside.inputTel.valueCheckAlgorithm = undefined;\n+    this.inside.inputTel.valueLength = undefined;\n+    this.inside.inputEmail = {};\n+    this.inside.inputEmail.elems = [];\n+    this.inside.inputEmail.valueCheckAlgorithm = undefined;\n+    this.inside.inputEmail.valueLength = undefined;\n+    this.inside.textarea = {};\n+    this.inside.textarea.elems = [];\n+    this.inside.textarea.valueCheckAlgorithm = undefined;\n+    this.inside.textarea.valueLength = undefined;\n+    this.inside.acceptance = {};\n+    this.inside.acceptance.elems = [];\n+    this.inside.submit = {};\n+    this.inside.submit.elems = [];  \n+    this.options = {};\n+    this.options.inputText = {\n+      valueCheckAlgorithm: _option => {\n+        if (_option instanceof RegExp) {\n+          this.inside.inputText.valueCheckAlgorithm = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"inputText.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n+        }\n+      },\n+      valueLength: _option => {\n+        if (typeof _option === 'number') {\n+          this.inside.inputText.valueLength = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"inputText.valueLength\" is not a number. Expected: nothing or number.')\n+        }\n+      }\n+    };\n+    this.options.inputTel = {\n+      valueCheckAlgorithm: _option => {\n+        if (_option instanceof RegExp) {\n+          this.inside.inputTel.valueCheckAlgorithm = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"inputTel.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n+        }\n+      },\n+      valueLength: _option => {\n+        if (typeof _option === 'number') {\n+          this.inside.inputTel.valueLength = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"inputTel.valueLength\" is not a number. Expected: nothing or number.')\n+        }\n+      }\n+    };\n+    this.options.inputEmail = {\n+      valueCheckAlgorithm: _option => {\n+        if (_option instanceof RegExp) {\n+          this.inside.inputEmail.valueCheckAlgorithm = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"inputText.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n+        }\n+      },\n+      valueLength: _option => {\n+        if (typeof _option === 'number') {\n+          this.inside.inputEmail.valueLength = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"inputEmail.valueLength\" is not a number. Expected: nothing or number.')\n+        }\n+      }\n+    };\n+    this.options.textarea = {\n+      valueCheckAlgorithm: _option => {\n+        if (_option instanceof RegExp) {\n+          this.inside.textarea.valueCheckAlgorithm = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"textarea.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n+        }\n+      },\n+      valueLength: _option => {\n+        if (typeof _option === 'number') {\n+          this.inside.textarea.valueLength = _option;\n+        } else {\n+          throw new TypeError('Second argument, \"textarea.valueLength\" is not a number. Expected: nothing or number.')\n+        }\n+      }\n+    };\n+    this.options.acceptance = _checkboxes => {\n+      if (typeof _checkboxes === 'object') {\n+        if (_checkboxes instanceof Array) {\n+          _checkboxes.forEach(_elem => {\n+            if (_elem.nodeName) {\n+              this.inside.acceptance.elems.push(_elem);\n+            } else {\n+              throw new TypeError('Second argument, element from \"acceptance\" array is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n+            }\n+          });\n+        } else {\n+          if (_checkboxes.nodeName) {\n+            this.inside.acceptance.elems.push(_checkboxes);\n+          } else {\n+            throw new TypeError('Second argument, \"acceptance\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n+          }\n+        }\n+      } else {\n+        throw new TypeError('Second argument, \"acceptance\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n+      }\n+    }\n+    this.options.ignor = _option => {\n+      if (typeof _option === 'object') {\n+        if (_option instanceof Array) {\n+          _option.forEach(_elem => {\n+            if (_elem.nodeName) {\n+              this.inside.ignor.push(_elem);\n+            } else {\n+              throw new TypeError('Second argument, element from \"ignor\" array is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n+            }\n+          });\n+        } else {\n+          if (_option.nodeName) {\n+            this.inside.ignor.push(_option);\n+          } else {\n+            throw new TypeError('Second argument, \"ignor\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n+          }\n+        }\n+      } else {\n+        throw new TypeError('Second argument, \"ignor\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n+      }\n+    }\n+    if (typeof _options === 'object') {\n+      for (_property in _options) {\n+        switch (_property) {\n+          case 'inputText':\n+            if ('valueCheckAlgorithm' in _options.inputText) {\n+              this.options.inputText.valueCheckAlgorithm(_options.inputText.valueCheckAlgorithm);\n+            }\n+            if ('valueLength' in _options.inputText) {\n+              this.options.inputText.valueLength(_options.inputText.valueLength);\n+              this.inside.inputText.elems.forEach(_elem => {\n+                $(_elem).attr({'maxlength': _options.inputText.valueLength});\n+              })\n+            }\n+            break;\n+          case 'inputTel':\n+            if ('valueCheckAlgorithm' in _options.inputTel) {\n+              this.options.inputTel.valueCheckAlgorithm(_options.inputTel.valueCheckAlgorithm);\n+            }\n+            if ('valueLength' in _options.inputTel) {\n+              this.options.inputTel.valueLength(_options.inputTel.valueLength);\n+              this.inside.inputTel.elems.forEach(_elem => {\n+                $(_elem).attr({'maxlength': _options.inputTel.valueLength});\n+              })\n+            }\n+            break;\n+          case 'inputEmail':\n+            if ('valueCheckAlgorithm' in _options.inputEmail) {\n+              this.options.inputEmail.valueCheckAlgorithm(_options.inputEmail.valueCheckAlgorithm);\n+            }\n+            if ('valueLength' in _options.inputEmail) {\n+              this.options.inputEmail.valueLength(_options.inputEmail.valueLength);\n+              this.inside.inputEmail.elems.forEach(_elem => {\n+                $(_elem).attr({'maxlength': _options.inputEmail.valueLength});\n+              })\n+            }\n+            break;\n+          case 'textarea':\n+            if ('valueCheckAlgorithm' in _options.textarea) {\n+              this.options.textarea.valueCheckAlgorithm(_options.textarea.valueCheckAlgorithm);\n+            }\n+            if ('valueLength' in _options.textarea) {\n+              this.options.textarea.valueLength(_options.textarea.valueLength);\n+              this.inside.textarea.elems.forEach(_elem => {\n+                $(_elem).attr({'maxlength': _options.textarea.valueLength});\n+              })\n+            }\n+            break;\n+          case 'acceptance':\n+            this.options.acceptance(_options.acceptance);\n+            break;\n+          case 'ignor':\n+            this.options.ignor(_options.ignor);\n+            break;\n+        }\n+      }\n+    }\n+    $(_selectorForm).find('input[type=\"text\"]').each((_index, _elem) => {\n+      if (this.inside.ignor.length > 0) {\n+        this.inside.ignor.forEach(_elemIgnor => {\n+          if (_elemIgnor !== _elem) {\n+            this.inside.inputText.elems.push(_elem);\n+          }\n+        })\n+      } else {\n+        this.inside.inputText.elems.push(_elem);\n+      }\n+    });\n+    $(_selectorForm).find('input[type=\"tel\"]').each((_index, _elem) => {\n+      if (this.inside.ignor.length > 0) {\n+        this.inside.ignor.forEach(_elemIgnor => {\n+          if (_elemIgnor !== _elem) {\n+            this.inside.inputTel.elems.push(_elem);\n+          }\n+        })\n+      } else {\n+        this.inside.inputTel.elems.push(_elem);\n+      }\n+    });\n+    $(_selectorForm).find('input[type=\"email\"]').each((_index, _elem) => {\n+      if (this.inside.ignor.length > 0) {\n+        this.inside.ignor.forEach(_elemIgnor => {\n+          if (_elemIgnor !== _elem) {\n+            this.inside.inputEmail.elems.push(_elem);\n+          }\n+        })\n+      } else {\n+        this.inside.inputEmail.elems.push(_elem);\n+      }\n+    });\n+    $(_selectorForm).find('textarea').each((_index, _elem) => {\n+      if (this.inside.ignor.length > 0) {\n+        this.inside.ignor.forEach(_elemIgnor => {\n+          if (_elemIgnor !== _elem) {\n+            this.inside.textarea.elems.push(_elem);\n+          }\n+        })\n+      } else {\n+        this.inside.textarea.elems.push(_elem);\n+      }\n+    });\n+    $(_selectorForm).find('input[type=\"submit\"]').each((_index, _elem) => {\n+      this.inside.submit.elems.push(_elem);\n+    });\n+    $(_selectorForm).find('button[type=\"submit\"]').each((_index, _elem) => {\n+      this.inside.submit.elems.push(_elem);\n+    });\n+    this.inside.submit.elems.forEach(_elem => {\n+      $(_elem).click(_evt => {\n+        _evt.preventDefault();\n+        this.check();\n+      })\n+    })\n+    this._elemStatus = [];\n+    this.testMode = false;\n+    this.check = () => {\n+      this._elemStatus.length = 0;\n+      _this = this;\n+      function CheckTemplate1(_insideObj) {\n+        if (_insideObj.elems.length > 0) {\n+          for (let i = 0; i < _insideObj.elems.length; i++) {\n+            let _elem = _insideObj.elems[i];\n+            if ($(_elem).attr('required')) {\n+              if (_elem.value === '') {\n+                _this._elemStatus.push({\n+                  elem: _elem,\n+                  status: 'incorrect'\n+                });\n+                $(_elem).addClass('_incorrect');\n+                continue;\n+              }\n+            } else if (_elem.value === '') {\n+              _this._elemStatus.push({\n+                elem: _elem,\n+                status: 'correct'\n+              });\n+              $(_elem).removeClass('_incorrect');\n+              continue;\n+            }\n+            if (_insideObj.valueLength != undefined) {\n+              if (_elem.value.length <= _insideObj.valueLength) {\n+                _this._elemStatus.push({\n+                  elem: _elem,\n+                  status: 'correct'\n+                });\n+              } else {\n+                _this._elemStatus.push({\n+                  elem: _elem,\n+                  status: 'incorrect'\n+                });\n+                $(_elem).addClass('_incorrect');\n+                continue;\n+              }\n+            }\n+            if (_elem.checkValidity()) {\n+              if (_insideObj.valueCheckAlgorithm) {\n+                if (_insideObj.valueCheckAlgorithm.test(_elem.value)) {\n+                  _this._elemStatus.push({\n+                    elem: _elem,\n+                    status: 'correct'\n+                  });\n+                  $(_elem).removeClass('_incorrect');\n+                } else {\n+                  _this._elemStatus.push({\n+                    elem: _elem,\n+                    status: 'incorrect'\n+                  });\n+                  $(_elem).addClass('_incorrect');\n+                }\n+              } else {\n+                _this._elemStatus.push({\n+                  elem: _elem,\n+                  status: 'correct'\n+                });\n+                $(_elem).removeClass('_incorrect');\n+              }\n+            } else {\n+              _this._elemStatus.push({\n+                elem: _elem,\n+                status: 'incorrect'\n+              });\n+              $(_elem).addClass('_incorrect');\n+            }\n+          }\n+        } else {\n+          return true;\n+        }\n+      }\n+      CheckTemplate1(this.inside.inputText);\n+      CheckTemplate1(this.inside.inputTel);\n+      CheckTemplate1(this.inside.inputEmail);\n+      CheckTemplate1(this.inside.textarea);\n+      if (this.inside.acceptance.elems.length > 0) {\n+        this.inside.acceptance.elems.forEach(_elem => {\n+          if ($(_elem).is(':checked')) {\n+            this._elemStatus.push({\n+              elem: _elem,\n+              status: 'correct'\n+            })\n+          } else {\n+            this._elemStatus.push({\n+              elem: _elem,\n+              status: 'incorrect'\n+            })\n+          }\n+        })\n+      }\n+      for (let i = 0; i < this._elemStatus.length; i++) {\n+        if (this._elemStatus[i].status === 'incorrect') {\n+          if (this.testMode) {\n+            $(this.inside.form).removeClass('test_STATUS-CORRECT');\n+            $(this.inside.form).addClass('test_STATUS-INCORRECT');\n+          }\n+          this.inside.form.dispatchEvent(_formIncorrect);\n+          break;\n+        }\n+        if (i + 1 === this._elemStatus.length) {\n+          if (this.testMode) {\n+            $(this.inside.form).removeClass('test_STATUS-INCORRECT');\n+            $(this.inside.form).addClass('test_STATUS-CORRECT');\n+          } else {\n+            //this.inside.form.submit();\n+            this.inside.form.dispatchEvent(_formCorrect);\n+          }\n+        }\n+      }\n+    }\n+    Object.defineProperty(this, '_elemStatus', {\n+      writable: false,\n+      configurable: false\n+    });\n+  } catch (_err) {\n+    console.log(_err);\n+  }\n+}\n+\n+$(document).ready(() => {\n+  if ($('.header-callback .header-callback-form').length > 0) {\n+    var _formHeaderCallback = new FormValidation($('.header-callback .header-callback-form')[0], {\n+      inputText: {\n+        valueLength: 254\n+      },\n+      inputTel: {\n+        valueLength: 50\n+      },\n+      inputEmail: {\n+        valueCheckAlgorithm: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n+        valueLength: 254\n+      }\n+    })\n+  }\n+  \n+  if ($('.header-callback-vacancy .header-callback-form').length > 0) {\n+    var _formHeaderCallbackVacancy = new FormValidation($('.header-callback-vacancy .header-callback-form')[0], {\n+      inputText: {\n+        valueLength: 254\n+      },\n+      inputTel: {\n+        valueLength: 50\n+      },\n+      inputEmail: {\n+        valueCheckAlgorithm: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n+        valueLength: 254\n+      },\n+      ignor: $('.header-callback__vacancy')[0]\n+    })\n+  }\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1624010200411,
            "name": "Commit-0",
            "content": "const FormValidation = function (_selectorForm, _options) {\n  //  _selectorForm | DOM element | The form.\n  //  _options | Object | Options of the form validation.\n  //  - EXAMPLE start -\n  //  var _form = new FormValidation({{{ 1 }}}, {\n  //    {{{ 2 }}}: {\n  //      valueCheckAlgorithm: {{{ 3 }}},\n  //      valueLength: {{{ 4 }}}\n  //    },\n  //    acceptance: [\n  //      {{{ 5 }}},\n  //      {{{ 5 }}}\n  //    ]\n  //    - OR -\n  //    acceptance: {{{ 5 }}}\n  //  });\n  //  - EXAMPLE end -  \n  //  {{{ 1 }}} | DOM element | The form's DOM element.\n  //  {{{ 2 }}} | Object property | The type of input. Abled values: \"inputText\", \"inputTel\", \"inputEmail\", \"textarea\", \"acceptance\", \"ignor\".\n  //  {{{ 3 }}} | RegExp | Regular expression, you want to check with.\n  //  {{{ 4 }}} | Number | Maximum size of input value. It creates \"maxlength\" attribute of \"input\" in DOM.\n  //  {{{ 5 }}} | DOM element, checkbox | The acceptance's input-checkbox.\n  //\n  //  Use property \"testMode\" in created objects or in constructor to test your validation in front-end and not submit the form.\n  //  You can see \"test_STATUS-CORRECT\" or \"test_STATUS-INCORRECT\" in form class attribute.\n\n  try {\n    if (typeof _selectorForm !== 'object' && !_selectorForm.nodeName) {\n      throw new TypeError('Argument is not a DOM element. Expected: DOM element.');\n    }\n    let _formCorrect = new Event('form-status-correct');\n    let _formIncorrect = new Event('form-status-incorrect');\n    this.inside = {};\n    this.inside.form = _selectorForm;\n    this.inside.ignor = [];\n    this.inside.inputText = {};\n    this.inside.inputText.elems = [];\n    this.inside.inputText.valueCheckAlgorithm = undefined;\n    this.inside.inputText.valueLength = undefined;\n    this.inside.inputTel = {};\n    this.inside.inputTel.elems = [];\n    this.inside.inputTel.valueCheckAlgorithm = undefined;\n    this.inside.inputTel.valueLength = undefined;\n    this.inside.inputEmail = {};\n    this.inside.inputEmail.elems = [];\n    this.inside.inputEmail.valueCheckAlgorithm = undefined;\n    this.inside.inputEmail.valueLength = undefined;\n    this.inside.textarea = {};\n    this.inside.textarea.elems = [];\n    this.inside.textarea.valueCheckAlgorithm = undefined;\n    this.inside.textarea.valueLength = undefined;\n    this.inside.acceptance = {};\n    this.inside.acceptance.elems = [];\n    this.inside.submit = {};\n    this.inside.submit.elems = [];  \n    this.options = {};\n    this.options.inputText = {\n      valueCheckAlgorithm: _option => {\n        if (_option instanceof RegExp) {\n          this.inside.inputText.valueCheckAlgorithm = _option;\n        } else {\n          throw new TypeError('Second argument, \"inputText.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n        }\n      },\n      valueLength: _option => {\n        if (typeof _option === 'number') {\n          this.inside.inputText.valueLength = _option;\n        } else {\n          throw new TypeError('Second argument, \"inputText.valueLength\" is not a number. Expected: nothing or number.')\n        }\n      }\n    };\n    this.options.inputTel = {\n      valueCheckAlgorithm: _option => {\n        if (_option instanceof RegExp) {\n          this.inside.inputTel.valueCheckAlgorithm = _option;\n        } else {\n          throw new TypeError('Second argument, \"inputTel.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n        }\n      },\n      valueLength: _option => {\n        if (typeof _option === 'number') {\n          this.inside.inputTel.valueLength = _option;\n        } else {\n          throw new TypeError('Second argument, \"inputTel.valueLength\" is not a number. Expected: nothing or number.')\n        }\n      }\n    };\n    this.options.inputEmail = {\n      valueCheckAlgorithm: _option => {\n        if (_option instanceof RegExp) {\n          this.inside.inputEmail.valueCheckAlgorithm = _option;\n        } else {\n          throw new TypeError('Second argument, \"inputText.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n        }\n      },\n      valueLength: _option => {\n        if (typeof _option === 'number') {\n          this.inside.inputEmail.valueLength = _option;\n        } else {\n          throw new TypeError('Second argument, \"inputEmail.valueLength\" is not a number. Expected: nothing or number.')\n        }\n      }\n    };\n    this.options.textarea = {\n      valueCheckAlgorithm: _option => {\n        if (_option instanceof RegExp) {\n          this.inside.textarea.valueCheckAlgorithm = _option;\n        } else {\n          throw new TypeError('Second argument, \"textarea.valueCheckAlgorithm\" is not a regular expression. Expected: nothing or regular expression.');\n        }\n      },\n      valueLength: _option => {\n        if (typeof _option === 'number') {\n          this.inside.textarea.valueLength = _option;\n        } else {\n          throw new TypeError('Second argument, \"textarea.valueLength\" is not a number. Expected: nothing or number.')\n        }\n      }\n    };\n    this.options.acceptance = _checkboxes => {\n      if (typeof _checkboxes === 'object') {\n        if (_checkboxes instanceof Array) {\n          _checkboxes.forEach(_elem => {\n            if (_elem.nodeName) {\n              this.inside.acceptance.elems.push(_elem);\n            } else {\n              throw new TypeError('Second argument, element from \"acceptance\" array is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n            }\n          });\n        } else {\n          if (_checkboxes.nodeName) {\n            this.inside.acceptance.elems.push(_checkboxes);\n          } else {\n            throw new TypeError('Second argument, \"acceptance\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n          }\n        }\n      } else {\n        throw new TypeError('Second argument, \"acceptance\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n      }\n    }\n    this.options.ignor = _option => {\n      if (typeof _option === 'object') {\n        if (_option instanceof Array) {\n          _option.forEach(_elem => {\n            if (_elem.nodeName) {\n              this.inside.ignor.push(_elem);\n            } else {\n              throw new TypeError('Second argument, element from \"ignor\" array is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n            }\n          });\n        } else {\n          if (_option.nodeName) {\n            this.inside.ignor.push(_option);\n          } else {\n            throw new TypeError('Second argument, \"ignor\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n          }\n        }\n      } else {\n        throw new TypeError('Second argument, \"ignor\" is not a DOM element. Expected: nothing, DOM element or array of DOM elements.');\n      }\n    }\n    if (typeof _options === 'object') {\n      for (_property in _options) {\n        switch (_property) {\n          case 'inputText':\n            if ('valueCheckAlgorithm' in _options.inputText) {\n              this.options.inputText.valueCheckAlgorithm(_options.inputText.valueCheckAlgorithm);\n            }\n            if ('valueLength' in _options.inputText) {\n              this.options.inputText.valueLength(_options.inputText.valueLength);\n              this.inside.inputText.elems.forEach(_elem => {\n                $(_elem).attr({'maxlength': _options.inputText.valueLength});\n              })\n            }\n            break;\n          case 'inputTel':\n            if ('valueCheckAlgorithm' in _options.inputTel) {\n              this.options.inputTel.valueCheckAlgorithm(_options.inputTel.valueCheckAlgorithm);\n            }\n            if ('valueLength' in _options.inputTel) {\n              this.options.inputTel.valueLength(_options.inputTel.valueLength);\n              this.inside.inputTel.elems.forEach(_elem => {\n                $(_elem).attr({'maxlength': _options.inputTel.valueLength});\n              })\n            }\n            break;\n          case 'inputEmail':\n            if ('valueCheckAlgorithm' in _options.inputEmail) {\n              this.options.inputEmail.valueCheckAlgorithm(_options.inputEmail.valueCheckAlgorithm);\n            }\n            if ('valueLength' in _options.inputEmail) {\n              this.options.inputEmail.valueLength(_options.inputEmail.valueLength);\n              this.inside.inputEmail.elems.forEach(_elem => {\n                $(_elem).attr({'maxlength': _options.inputEmail.valueLength});\n              })\n            }\n            break;\n          case 'textarea':\n            if ('valueCheckAlgorithm' in _options.textarea) {\n              this.options.textarea.valueCheckAlgorithm(_options.textarea.valueCheckAlgorithm);\n            }\n            if ('valueLength' in _options.textarea) {\n              this.options.textarea.valueLength(_options.textarea.valueLength);\n              this.inside.textarea.elems.forEach(_elem => {\n                $(_elem).attr({'maxlength': _options.textarea.valueLength});\n              })\n            }\n            break;\n          case 'acceptance':\n            this.options.acceptance(_options.acceptance);\n            break;\n          case 'ignor':\n            this.options.ignor(_options.ignor);\n            break;\n        }\n      }\n    }\n    $(_selectorForm).find('input[type=\"text\"]').each((_index, _elem) => {\n      if (this.inside.ignor.length > 0) {\n        this.inside.ignor.forEach(_elemIgnor => {\n          if (_elemIgnor !== _elem) {\n            this.inside.inputText.elems.push(_elem);\n          }\n        })\n      } else {\n        this.inside.inputText.elems.push(_elem);\n      }\n    });\n    $(_selectorForm).find('input[type=\"tel\"]').each((_index, _elem) => {\n      if (this.inside.ignor.length > 0) {\n        this.inside.ignor.forEach(_elemIgnor => {\n          if (_elemIgnor !== _elem) {\n            this.inside.inputTel.elems.push(_elem);\n          }\n        })\n      } else {\n        this.inside.inputTel.elems.push(_elem);\n      }\n    });\n    $(_selectorForm).find('input[type=\"email\"]').each((_index, _elem) => {\n      if (this.inside.ignor.length > 0) {\n        this.inside.ignor.forEach(_elemIgnor => {\n          if (_elemIgnor !== _elem) {\n            this.inside.inputEmail.elems.push(_elem);\n          }\n        })\n      } else {\n        this.inside.inputEmail.elems.push(_elem);\n      }\n    });\n    $(_selectorForm).find('textarea').each((_index, _elem) => {\n      if (this.inside.ignor.length > 0) {\n        this.inside.ignor.forEach(_elemIgnor => {\n          if (_elemIgnor !== _elem) {\n            this.inside.textarea.elems.push(_elem);\n          }\n        })\n      } else {\n        this.inside.textarea.elems.push(_elem);\n      }\n    });\n    $(_selectorForm).find('input[type=\"submit\"]').each((_index, _elem) => {\n      this.inside.submit.elems.push(_elem);\n    });\n    $(_selectorForm).find('button[type=\"submit\"]').each((_index, _elem) => {\n      this.inside.submit.elems.push(_elem);\n    });\n    this.inside.submit.elems.forEach(_elem => {\n      $(_elem).click(_evt => {\n        _evt.preventDefault();\n        this.check();\n      })\n    })\n    this._elemStatus = [];\n    this.testMode = false;\n    this.check = () => {\n      this._elemStatus.length = 0;\n      _this = this;\n      function CheckTemplate1(_insideObj) {\n        if (_insideObj.elems.length > 0) {\n          for (let i = 0; i < _insideObj.elems.length; i++) {\n            let _elem = _insideObj.elems[i];\n            if ($(_elem).attr('required')) {\n              if (_elem.value === '') {\n                _this._elemStatus.push({\n                  elem: _elem,\n                  status: 'incorrect'\n                });\n                $(_elem).addClass('_incorrect');\n                continue;\n              }\n            } else if (_elem.value === '') {\n              _this._elemStatus.push({\n                elem: _elem,\n                status: 'correct'\n              });\n              $(_elem).removeClass('_incorrect');\n              continue;\n            }\n            if (_insideObj.valueLength != undefined) {\n              if (_elem.value.length <= _insideObj.valueLength) {\n                _this._elemStatus.push({\n                  elem: _elem,\n                  status: 'correct'\n                });\n              } else {\n                _this._elemStatus.push({\n                  elem: _elem,\n                  status: 'incorrect'\n                });\n                $(_elem).addClass('_incorrect');\n                continue;\n              }\n            }\n            if (_elem.checkValidity()) {\n              if (_insideObj.valueCheckAlgorithm) {\n                if (_insideObj.valueCheckAlgorithm.test(_elem.value)) {\n                  _this._elemStatus.push({\n                    elem: _elem,\n                    status: 'correct'\n                  });\n                  $(_elem).removeClass('_incorrect');\n                } else {\n                  _this._elemStatus.push({\n                    elem: _elem,\n                    status: 'incorrect'\n                  });\n                  $(_elem).addClass('_incorrect');\n                }\n              } else {\n                _this._elemStatus.push({\n                  elem: _elem,\n                  status: 'correct'\n                });\n                $(_elem).removeClass('_incorrect');\n              }\n            } else {\n              _this._elemStatus.push({\n                elem: _elem,\n                status: 'incorrect'\n              });\n              $(_elem).addClass('_incorrect');\n            }\n          }\n        } else {\n          return true;\n        }\n      }\n      CheckTemplate1(this.inside.inputText);\n      CheckTemplate1(this.inside.inputTel);\n      CheckTemplate1(this.inside.inputEmail);\n      CheckTemplate1(this.inside.textarea);\n      if (this.inside.acceptance.elems.length > 0) {\n        this.inside.acceptance.elems.forEach(_elem => {\n          if ($(_elem).is(':checked')) {\n            this._elemStatus.push({\n              elem: _elem,\n              status: 'correct'\n            })\n          } else {\n            this._elemStatus.push({\n              elem: _elem,\n              status: 'incorrect'\n            })\n          }\n        })\n      }\n      for (let i = 0; i < this._elemStatus.length; i++) {\n        if (this._elemStatus[i].status === 'incorrect') {\n          if (this.testMode) {\n            $(this.inside.form).removeClass('test_STATUS-CORRECT');\n            $(this.inside.form).addClass('test_STATUS-INCORRECT');\n          }\n          this.inside.form.dispatchEvent(_formIncorrect);\n          break;\n        }\n        if (i + 1 === this._elemStatus.length) {\n          if (this.testMode) {\n            $(this.inside.form).removeClass('test_STATUS-INCORRECT');\n            $(this.inside.form).addClass('test_STATUS-CORRECT');\n          } else {\n            //this.inside.form.submit();\n            this.inside.form.dispatchEvent(_formCorrect);\n          }\n        }\n      }\n    }\n    Object.defineProperty(this, '_elemStatus', {\n      writable: false,\n      configurable: false\n    });\n  } catch (_err) {\n    console.log(_err);\n  }\n}\n\n$(document).ready(() => {\n  if ($('.header-callback .header-callback-form').length > 0) {\n    var _formHeaderCallback = new FormValidation($('.header-callback .header-callback-form')[0], {\n      inputText: {\n        valueLength: 254\n      },\n      inputTel: {\n        valueCheckAlgorithm: /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/,\n        valueLength: 50\n      },\n      inputEmail: {\n        valueCheckAlgorithm: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n        valueLength: 254\n      },\n      // acceptance: $('.header-callback .header-callback-form-policy__input')[0]\n    })\n  }\n  \n  if ($('.header-callback-vacancy .header-callback-form').length > 0) {\n    var _formHeaderCallbackVacancy = new FormValidation($('.header-callback-vacancy .header-callback-form')[0], {\n      inputText: {\n        valueLength: 254\n      },\n      inputTel: {\n        valueCheckAlgorithm: /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/,\n        valueLength: 50\n      },\n      inputEmail: {\n        valueCheckAlgorithm: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\n        valueLength: 254\n      },\n      // acceptance: $('.header-callback-vacancy .header-callback-form-policy__input')[0],\n      ignor: $('.header-callback__vacancy')[0]\n    })\n  }\n});"
        }
    ]
}